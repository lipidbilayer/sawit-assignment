// Package generated provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.16.2 DO NOT EDIT.
package generated

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
	"github.com/oapi-codegen/runtime"
)

// DronePlanResponse defines model for DronePlanResponse.
type DronePlanResponse struct {
	// Distance Total distance traveled by the drone
	Distance *int `json:"distance,omitempty"`
	Rest     *struct {
		// X X-coordinate of the location where the drone will first land
		X *int `json:"x,omitempty"`

		// Y Y-coordinate of the location where the drone will first land
		Y *int `json:"y,omitempty"`
	} `json:"rest,omitempty"`
}

// ErrorResponse defines model for ErrorResponse.
type ErrorResponse struct {
	Message string `json:"message"`
}

// ErrorResponseApi defines model for ErrorResponseApi.
type ErrorResponseApi struct {
	Code    int    `json:"code"`
	Message string `json:"message"`
}

// HelloResponse defines model for HelloResponse.
type HelloResponse struct {
	Message string `json:"message"`
}

// StatsResponse defines model for StatsResponse.
type StatsResponse struct {
	Count  *int `json:"count,omitempty"`
	Max    *int `json:"max,omitempty"`
	Median *int `json:"median,omitempty"`
	Min    *int `json:"min,omitempty"`
}

// UuidResponse defines model for UuidResponse.
type UuidResponse struct {
	Id *string `json:"id,omitempty"`
}

// PostEstateJSONBody defines parameters for PostEstate.
type PostEstateJSONBody struct {
	Length int `json:"length"`
	Width  int `json:"width"`
}

// GetEstateIdDronePlanParams defines parameters for GetEstateIdDronePlan.
type GetEstateIdDronePlanParams struct {
	MaxDistance *int `form:"max_distance,omitempty" json:"max_distance,omitempty"`
}

// PostEstateIdTreeJSONBody defines parameters for PostEstateIdTree.
type PostEstateIdTreeJSONBody struct {
	Height int `json:"height"`
	X      int `json:"x"`
	Y      int `json:"y"`
}

// GetHelloParams defines parameters for GetHello.
type GetHelloParams struct {
	Id int `form:"id" json:"id"`
}

// PostEstateJSONRequestBody defines body for PostEstate for application/json ContentType.
type PostEstateJSONRequestBody PostEstateJSONBody

// PostEstateIdTreeJSONRequestBody defines body for PostEstateIdTree for application/json ContentType.
type PostEstateIdTreeJSONRequestBody PostEstateIdTreeJSONBody

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Insert a new estate
	// (POST /estate)
	PostEstate(ctx echo.Context) error
	// Get drone flight plan for a given estate
	// (GET /estate/{id}/drone-plan)
	GetEstateIdDronePlan(ctx echo.Context, id string, params GetEstateIdDronePlanParams) error
	// Get stats of trees in a given estate
	// (GET /estate/{id}/stats)
	GetEstateIdStats(ctx echo.Context, id string) error
	// Store tree data in a given estate
	// (POST /estate/{id}/tree)
	PostEstateIdTree(ctx echo.Context, id string) error
	// This is just a test endpoint to get you started.
	// (GET /hello)
	GetHello(ctx echo.Context, params GetHelloParams) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// PostEstate converts echo context to params.
func (w *ServerInterfaceWrapper) PostEstate(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PostEstate(ctx)
	return err
}

// GetEstateIdDronePlan converts echo context to params.
func (w *ServerInterfaceWrapper) GetEstateIdDronePlan(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	// Parameter object where we will unmarshal all parameters from the context
	var params GetEstateIdDronePlanParams
	// ------------- Optional query parameter "max_distance" -------------

	err = runtime.BindQueryParameter("form", true, false, "max_distance", ctx.QueryParams(), &params.MaxDistance)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter max_distance: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetEstateIdDronePlan(ctx, id, params)
	return err
}

// GetEstateIdStats converts echo context to params.
func (w *ServerInterfaceWrapper) GetEstateIdStats(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetEstateIdStats(ctx, id)
	return err
}

// PostEstateIdTree converts echo context to params.
func (w *ServerInterfaceWrapper) PostEstateIdTree(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PostEstateIdTree(ctx, id)
	return err
}

// GetHello converts echo context to params.
func (w *ServerInterfaceWrapper) GetHello(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetHelloParams
	// ------------- Required query parameter "id" -------------

	err = runtime.BindQueryParameter("form", true, true, "id", ctx.QueryParams(), &params.Id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetHello(ctx, params)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface) {
	RegisterHandlersWithBaseURL(router, si, "")
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.POST(baseURL+"/estate", wrapper.PostEstate)
	router.GET(baseURL+"/estate/:id/drone-plan", wrapper.GetEstateIdDronePlan)
	router.GET(baseURL+"/estate/:id/stats", wrapper.GetEstateIdStats)
	router.POST(baseURL+"/estate/:id/tree", wrapper.PostEstateIdTree)
	router.GET(baseURL+"/hello", wrapper.GetHello)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/+xX32/bNhD+Vzhuj2qkrN2L3ra16IyhW7G42IYiGBjxbDGgSPV4cuwF/t+Ho+SfkmOn",
	"iYcN6JstHe873ffdfdK9LHxVeweOgszvZShKqFT8+Rq9g/dWud8g1N4F4Is1+hqQDMQQbQIpV8Q7GkKB",
	"pibjnczl2JOyYnVfEKoZWNDiZiGoBKE5t0xkZZypmkrmWSJpUYPMpXEEU0C5TCRCoD7ovI/2x4vCe9TG",
	"KQLhJxHC+kLxbXFXAsIGVdwZa8XEYCBhldNHq1j08f48H95yfcnf3EJBQ1cS+QbR42FeKghBTeON7mgg",
	"NG4akyF8agyClvnHdeD1MYzva9OHKbzextjq2ckFxBTJg3X8BNb6k54V5qqqLZ+OZxLxu0erv5LJE7pw",
	"RYrCYfTCNy5q9GENVWp+QhBoo9wJceZo0JBmPjRGH34Qo4fJ2hfjMpHGTTwHW1NAl8upiqPejcaMRIYi",
	"Cx8CoLgCnJmCSZ4BhnZ+Li+yi4wjfQ1OsbTky3gpkbWiMhaUQiBFbaW+3QNcb5yxkZa5fO8DvWljWjoh",
	"0A9eL1paHEFLjKpra9rRTG+Dd5st12+CBTelMjZXzdvmfpdlWbY1spdDjNwZ/fhjeyLssFfJrgdbvzlA",
	"2EC7IiOhsfxvs+xRD/8NwkTm8ut04wFpZwDpjloi9u4K/BFBEWgZb0xUY+nZoHuLZwC+cTCvoSDQAjg8",
	"tjM0VaVwIXM5cgGQhBIO7kQnJI7oRJXeG71M43p+Udt25qYwoLG30ElspNd2GEWKqgICDDL/uG8Oo9cr",
	"S2jBBHnBIJ0dTKyZliQmHiWPksyj5GWymiGj5T7PyVbjehN63yb51AAuNlkqNf9r7c7b53drfdfqVYSm",
	"4qJnPAqFskI5LUqP5m/vdn187WqFcp2rJ8I40XXjiLddn1Gw/deVAdn8+vN/VLBvgXb1ERUz8SiUmJoZ",
	"uIMq5p/hFAFHJ/sc8U6BBP8xgUwRnk255xTDrmv/34QQKY08IEDg8TomAg48xSlHesyRjxXB5pWWgYQJ",
	"LIsbEIE8U/1sangODy+B52fHjF8eNfD54z1/8US/n0vOkazq/Ty/v/zi93FqrliIrTi1InVoZEr+LHho",
	"V8bvhv54DDnsafr+d7xv9xNpoH1jCCQQqEHHDL7KXp2HvSHsXzy/7TRO73E2Lk3gVXLbBH5TIy4RnK69",
	"cbSynYVveBsigb5ocwfA2YqWBq3MZUlU52nK39+25P23vF7+EwAA///WmbR91xAAAA==",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
